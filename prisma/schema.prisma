// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum userProfileEnum {
  USERS
  ADMIN
  FINANCE
}

enum accountType {
  CHECKING
  SAVINGS
}

enum transactionType {
  DEPOSIT
  WITHDRAW
  TRANSFER
  PAYMENT
}

enum cardType {
  CREDIT
  DEBIT
}

model Users {
  id         Int             @id @default(autoincrement())
  name       String
  document   String          @unique
  email      String          @unique
  password   String
  userAvatar String?
  rg         String?
  gender     String?
  isActive   Boolean         @default(true)
  profile    userProfileEnum @default(USERS)
  addressId  Int?
  address    Address?        @relation(fields: [addressId], references: [id])
  accounts   Accounts[]
  cards      Cards[]
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt
}

model Address {
  id         Int      @id @default(autoincrement())
  street     String
  number     Int
  district   String
  city       String
  state      String
  country    String
  complement String
  zipCode    String   @unique
  users      Users[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Accounts {
  id           Int            @id @default(autoincrement())
  accoutNumber String         @unique
  agency       String
  balance      Float          @default(0.0)
  type         accountType
  userId       Int
  user         Users          @relation(fields: [userId], references: [id])
  transactions Transactions[]
  cards        Cards[]
  investiments Investiments[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}

model Transactions {
  id          Int             @id @default(autoincrement())
  amount      Float
  type        transactionType
  description String?
  accountId   Int
  account     Accounts        @relation(fields: [accountId], references: [id])
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
}

model Cards {
  id         Int         @id @default(autoincrement())
  cardNumber String      @unique
  cvv        String
  cardHolder String
  expiryDate DateTime
  password   String
  balance    Float       @default(0.0)
  type       accountType
  accountId  Int
  account    Accounts    @relation(fields: [accountId], references: [id])
  userId     Int
  user       Users       @relation(fields: [userId], references: [id])
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model Investiments {
  id        Int      @id @default(autoincrement())
  name      String
  amount    Float
  accountId Int
  account   Accounts @relation(fields: [accountId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
